type PostData {
  id: ID!
  clientId: String!
  title: String!
  status: PostStatus!
  rating: Int
  content: String
  notes: String
  author: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
  owner: String
}

enum PostStatus {
  ACTIVE
  INACTIVE
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostDataConnection {
  items: [PostData]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPostStatusInput {
  eq: PostStatus
  ne: PostStatus
}

input ModelPostDataFilterInput {
  id: ModelIDInput
  clientId: ModelStringInput
  title: ModelStringInput
  status: ModelPostStatusInput
  rating: ModelIntInput
  content: ModelStringInput
  notes: ModelStringInput
  author: ModelStringInput
  and: [ModelPostDataFilterInput]
  or: [ModelPostDataFilterInput]
  not: ModelPostDataFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getPostData(id: ID!): PostData
  listPostData(filter: ModelPostDataFilterInput, limit: Int, nextToken: String): ModelPostDataConnection
  syncPostData(filter: ModelPostDataFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPostDataConnection
}

input ModelPostDataConditionInput {
  clientId: ModelStringInput
  title: ModelStringInput
  status: ModelPostStatusInput
  rating: ModelIntInput
  content: ModelStringInput
  notes: ModelStringInput
  author: ModelStringInput
  and: [ModelPostDataConditionInput]
  or: [ModelPostDataConditionInput]
  not: ModelPostDataConditionInput
  _deleted: ModelBooleanInput
}

input CreatePostDataInput {
  id: ID
  clientId: String!
  title: String!
  status: PostStatus!
  rating: Int
  content: String
  notes: String
  author: String
  _version: Int
}

input UpdatePostDataInput {
  id: ID!
  clientId: String
  title: String
  status: PostStatus
  rating: Int
  content: String
  notes: String
  author: String
  _version: Int
}

input DeletePostDataInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPostData(input: CreatePostDataInput!, condition: ModelPostDataConditionInput): PostData
  updatePostData(input: UpdatePostDataInput!, condition: ModelPostDataConditionInput): PostData
  deletePostData(input: DeletePostDataInput!, condition: ModelPostDataConditionInput): PostData
}

input ModelSubscriptionPostDataFilterInput {
  id: ModelSubscriptionIDInput
  clientId: ModelSubscriptionStringInput
  title: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  rating: ModelSubscriptionIntInput
  content: ModelSubscriptionStringInput
  notes: ModelSubscriptionStringInput
  author: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostDataFilterInput]
  or: [ModelSubscriptionPostDataFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreatePostData(filter: ModelSubscriptionPostDataFilterInput, owner: String): PostData @aws_subscribe(mutations: ["createPostData"])
  onUpdatePostData(filter: ModelSubscriptionPostDataFilterInput, owner: String): PostData @aws_subscribe(mutations: ["updatePostData"])
  onDeletePostData(filter: ModelSubscriptionPostDataFilterInput, owner: String): PostData @aws_subscribe(mutations: ["deletePostData"])
}
